<launch>
    <arg name="model_name" default="mir1"/>
    <arg name="tf_prefix"    default="mir1" />
    <arg name="robot_x"   default="0.0" />
    <arg name="robot_y"   default="0.0" />
    <arg name="robot_yaw" default="0.0" />
    <arg name="robot_urdf_path" value="$(find miranda_description)/urdf/new_miranda.gazebo.xacro"/>
    <arg name="panda_name" default="panda1"/>
    <arg name="mir_name" default="mir1"/>

    <arg if="$(eval tf_prefix=='')" name="tf_prefix_slashed" value="" /> <!--Important for proper substitution (empty tf_prefix must not lead to leading slashes-->
	<arg unless="$(eval tf_prefix=='')" name="tf_prefix_slashed" value="$(arg tf_prefix)/" /> <!--Important for proper substitution (empty tf_prefix must not lead to leading slashes-->
    
    <arg name="load_gripper" default="true"/> 
    <arg name="use_custom_action_servers" default="true"/>
    <arg name="force_neutral_pose" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="load_gazebo" default="true"/>

    <arg name="initial_pose" default="[0.000,-0.785,0.0,2.356,0.0,1.57,0.785]"/>
    <!-- This argument sets the initial joint states -->
    <arg name="initial_joint_states"
    default=" -J $(arg model_name)::panda_joint1 0.000
              -J $(arg model_name)::panda_joint2 -0.785
              -J $(arg model_name)::panda_joint3 0.0
              -J $(arg model_name)::panda_joint4 -2.356
              -J $(arg model_name)::panda_joint5 0.0
              -J $(arg model_name)::panda_joint6 1.57
              -J $(arg model_name)::panda_joint7 0.785"/>

    <rosparam command="load" file="$(find miranda_launch_sim)/config/robot_details.yaml"/>
    
    <param name="/$(arg panda_name)/robot_description" command="$(find xacro)/xacro --inorder $(find custom_urdfs)/new_panda_arm_hand.urdf.xacro load_gripper:=$(arg load_gripper) load_gazebo:=$(arg load_gazebo)"/>
    <param name="robot_description" command="$(find xacro)/xacro $(arg robot_urdf_path) robot_namespace:=$(arg mir_name) tf_prefix:=$(arg tf_prefix) panda_namespace:=$(arg panda_name) load_gripper:=$(arg load_gripper) load_gazebo:=$(arg load_gazebo)" />    
    
    <param name="/arm/root_name" value="panda_link0" />
    <param if="$(arg load_gripper)" name="/arm/tip_name" value="panda_hand" /> 
    <param unless="$(arg load_gripper)" name="/arm/tip_name" value="panda_link8" /> 
    <param if="$(arg load_gripper)" name="/franka_gripper/robot_ip" value="sim" /> 
    <param if="$(arg load_gripper)" name="/arm/gravity_tip_name" value="panda_hand" /> 
    <param unless="$(arg load_gripper)" name="/arm/gravity_tip_name" value="panda_link8" /> 
    
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model $(arg model_name)
        -x $(arg robot_x) -y $(arg robot_y) -Y $(arg robot_yaw) $(arg initial_joint_states)" />

    <rosparam file="$(find mir_launch_sim)/config/gazebo_joint_state_controller.yaml" command="load"/>
    <rosparam file="$(find mir_launch_sim)/config/gazebo_diffdrive_controller.yaml" command="load" subst_value="true"/>
    
    
    <node name="controller_spawner_base" pkg="controller_manager" type="controller_manager" respawn="false"
    output="screen"  args="spawn joint_state_controller mobile_base_controller"/>

    <include file="$(find simu)/launch/miranda/panda_controller.launch">
        <arg name="gui" value="$(arg gui)" />
        <arg name="load_gripper" value="$(arg load_gripper)" />
        <arg name="panda_name" default="$(arg panda_name)"/>
    </include>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
        <param name="tf_prefix" value="$(arg tf_prefix)"/>
        <remap from="/joint_states" to="/$(arg model_name)/joint_states" />   
    </node>

    <node name="topic_remap" pkg="topic_tools" type="relay" args="/$(arg model_name)/joint_states /$(arg panda_name)/joint_states"/>

    <!-- Add passive + mimic joints to joint_states topic -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <rosparam param="source_list" subst_value="true">[joint_states]</rosparam>
        <param name="rate" value="200.0" />
        <param name="use_gui" value="false"/>
    </node>

    <group if="$(eval arg('force_neutral_pose') == true)" ns="/$(arg panda_name)">
        <node pkg="simu" type="sim_force_neutral_pose.py" name="startup_script">
            <rosparam file="$(find simu)/config/force_neutral_pose.yaml" command="load"/>
            <rosparam param="initial_pose" subst_value="True">$(arg initial_pose)</rosparam>
        </node>
    </group> 

    <include file="$(find mir_navigation)/launch/amcl.launch">
        <arg name="tf_prefix" value="$(arg tf_prefix)"/>
        <arg name="initial_pose_x"  value="$(arg robot_x)"/>
        <arg name="initial_pose_y"  value="$(arg robot_y)"/>
        <arg name="initial_pose_a"  value="$(arg robot_yaw)"/>
    </include>
    
    <include file="$(find mir_navigation)/launch/move_base.launch" pass_all_args="true">
        <arg name="global_planner" value="GlobalPlanner"/>
        <arg name="local_planner" value="DWAPlannerROS"/>
    </include>

    <node pkg="topic_tools" type="relay" name="b_scan_relay" args="b_scan scan"/>
    <node pkg="topic_tools" type="relay" name="f_scan_relay" args="f_scan scan"/>


    <node name="b_rep117_laser_filter" pkg="mir_driver" type="rep117_filter.py" output="screen">
        <remap from="scan" to="b_scan" />
        <remap from="scan_filtered" to="b_scan_rep117" />
    </node>

    <node name="f_rep117_laser_filter" pkg="mir_driver" type="rep117_filter.py" output="screen">
        <remap from="scan" to="f_scan" />
        <remap from="scan_filtered" to="f_scan_rep117" />
    </node>
</launch>